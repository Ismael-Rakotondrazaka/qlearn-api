// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique
  password  String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  role      Role
  sessions  Session[]
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  questions Question[]
  quizzes   Quiz[]
}

model Question {
  id             Int             @id @default(autoincrement())
  content        String          @db.Text
  categoryId     Int
  category       Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  difficulty     Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  answers        Answer[]
  sessionAnswers SessionAnswer[]
}

model Answer {
  id             Int             @id @default(autoincrement())
  content        String          @db.Text
  isCorrect      Boolean
  questionId     Int
  question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sessionAnswers SessionAnswer[]
}

model Quiz {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  difficulty  Int
  sessions    Session[]
}

model Session {
  id             Int             @id @default(autoincrement())
  score          Int
  quizId         Int
  quiz           Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userId         Int
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sessionAnswers SessionAnswer[]
}

model SessionAnswer {
  id               Int      @id @default(autoincrement())
  sessionId        Int
  session          Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  questionId       Int
  question         Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedAnswerId Int
  selectedAnswer   Answer   @relation(fields: [selectedAnswerId], references: [id], onDelete: Cascade)
}
